package GUIs;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import Controllers.DatabaseDriver;
import Controllers.FrameController;
import Controllers.JavaEmail;
import Controllers.Mail;
import java.awt.Color;
import java.awt.Desktop;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.PLAIN_MESSAGE;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class HomeGUI extends javax.swing.JFrame {

    private Vector<Vector<Object>> allLearnersIV = new Vector<>();
    private Vector<Vector<Object>> detentionsIV = new Vector<>();

    /**
     * WELCOME TO THE BACKEND OF THE DETENTION MANAGER. I apologize in advance 
     * for the lack of comments further on, but variables are named descriptively.
     * I hope you will improve this application beyond my expectations. 
     * Main areas of improvement are:
     * Sending e-mails from the OutboxGUI. Note that this function works fine 
     * when launched from Netbeans, but has been commented out because it does
     * not work once built.
     * Creating a Settings screen to change rules for Fridays and disciplinary hearings
     * More backend control from the front end side.
     */
    public HomeGUI() {
        initComponents();

        populateLearnersTable("", "", "");
        populateBreakDetentionsTable();
        dcsOffenceDate.setDateFormatString("yyyy-MM-dd");
        dcsOffenceDate.setDate(new Date());
        rdbMSP.requestFocus();
        btnPrintPDF.setText("Print Break Detention Sheet (" + (detentionsIV.size()) + ")");

        FrameController.setLayout(this);
        this.setExtendedState(this.MAXIMIZED_BOTH | this.getExtendedState());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        rdbOffence = new javax.swing.ButtonGroup();
        lblTitle = new javax.swing.JLabel();
        lpnEnterDetention = new javax.swing.JLayeredPane();
        txfGrade = new javax.swing.JTextField();
        txfSName = new javax.swing.JTextField();
        lblAmount = new javax.swing.JLabel();
        lblFirstName = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        txfFName = new javax.swing.JTextField();
        lblCampaignName = new javax.swing.JLabel();
        lblDescriptor = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        rdbMSP = new javax.swing.JRadioButton();
        rdbNK = new javax.swing.JRadioButton();
        rdbPEO = new javax.swing.JRadioButton();
        rdbMBD = new javax.swing.JRadioButton();
        rdbMFD = new javax.swing.JRadioButton();
        rdbAD = new javax.swing.JRadioButton();
        btnClear = new javax.swing.JButton();
        btnInsert = new javax.swing.JButton();
        dcsOffenceDate = new com.toedter.calendar.JDateChooser();
        lblCampaignName1 = new javax.swing.JLabel();
        txfComment = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        lpnLearners = new javax.swing.JLayeredPane();
        lblDescriptor1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearchLearners = new javax.swing.JTable();
        btnLearners1 = new javax.swing.JButton();
        lpnDetentions = new javax.swing.JLayeredPane();
        lblDescriptor2 = new javax.swing.JLabel();
        btnAttend = new javax.swing.JButton();
        btnPrintPDF = new javax.swing.JButton();
        tblDonations = new javax.swing.JScrollPane();
        tblDetentions = new javax.swing.JTable();
        btnFridays = new javax.swing.JButton();
        btnFridayAttend = new javax.swing.JButton();
        btnAttendDisc = new javax.swing.JButton();
        btnPrintDiscipl = new javax.swing.JButton();
        btnPrintPDF1 = new javax.swing.JButton();
        btnLearners = new javax.swing.JButton();
        btnHome = new javax.swing.JButton();
        btnDetentions = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Detention Manager");
        setSize(new java.awt.Dimension(0, 0));

        lblTitle.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        lblTitle.setText("Detention Manager");

        lpnEnterDetention.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        txfGrade.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txfGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfGradeActionPerformed(evt);
            }
        });
        txfGrade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txfGradeKeyTyped(evt);
            }
        });

        txfSName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txfSName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfSNameActionPerformed(evt);
            }
        });
        txfSName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txfSNameKeyTyped(evt);
            }
        });

        lblAmount.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAmount.setText("Offence Date:");

        lblFirstName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblFirstName.setText("Surname: ");

        lblLastName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblLastName.setText("Grade:");

        txfFName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txfFName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfFNameActionPerformed(evt);
            }
        });
        txfFName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txfFNameKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txfFNameKeyTyped(evt);
            }
        });

        lblCampaignName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblCampaignName.setText("First Name:");

        lblDescriptor.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblDescriptor.setText("Enter the details for the detention:");

        lblDate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblDate.setText("Description:");

        rdbOffence.add(rdbMSP);
        rdbMSP.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rdbMSP.setText("Missed Sports Practice");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, rdbOffence, org.jdesktop.beansbinding.ELProperty.create("1"), rdbMSP, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        rdbOffence.add(rdbNK);
        rdbNK.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rdbNK.setText("No Kit");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, rdbOffence, org.jdesktop.beansbinding.ELProperty.create("2"), rdbNK, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        rdbOffence.add(rdbPEO);
        rdbPEO.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rdbPEO.setText("PE Offence");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, rdbOffence, org.jdesktop.beansbinding.ELProperty.create("3"), rdbPEO, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        rdbOffence.add(rdbMBD);
        rdbMBD.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rdbMBD.setText("Missed Break Detention");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, rdbOffence, org.jdesktop.beansbinding.ELProperty.create("4"), rdbMBD, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        rdbOffence.add(rdbMFD);
        rdbMFD.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rdbMFD.setText("Missed Friday Detention");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, rdbOffence, org.jdesktop.beansbinding.ELProperty.create("5"), rdbMFD, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        rdbOffence.add(rdbAD);
        rdbAD.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rdbAD.setText("Academic Detention");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, rdbOffence, org.jdesktop.beansbinding.ELProperty.create("6"), rdbAD, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        btnClear.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnClear.setText("Clear Fields");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnInsert.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnInsert.setText("Add detention for the learner displayed");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        dcsOffenceDate.setDateFormatString("yyyy-MM-dd");
        dcsOffenceDate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lblCampaignName1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblCampaignName1.setText("Comment:");

        txfComment.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txfComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfCommentActionPerformed(evt);
            }
        });
        txfComment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txfCommentKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txfCommentKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout lpnEnterDetentionLayout = new javax.swing.GroupLayout(lpnEnterDetention);
        lpnEnterDetention.setLayout(lpnEnterDetentionLayout);
        lpnEnterDetentionLayout.setHorizontalGroup(
            lpnEnterDetentionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lpnEnterDetentionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lpnEnterDetentionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDescriptor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(lpnEnterDetentionLayout.createSequentialGroup()
                        .addGroup(lpnEnterDetentionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(lpnEnterDetentionLayout.createSequentialGroup()
                                .addGroup(lpnEnterDetentionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblCampaignName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(lpnEnterDetentionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(rdbNK, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(rdbPEO, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(rdbMBD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(rdbMFD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(rdbAD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dcsOffenceDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txfComment, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rdbMSP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(btnInsert, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                            .addComponent(btnClear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lpnEnterDetentionLayout.createSequentialGroup()
                                .addGroup(lpnEnterDetentionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblLastName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblCampaignName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(lpnEnterDetentionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txfSName, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                                    .addComponent(txfFName, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txfGrade, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addContainerGap())))
        );
        lpnEnterDetentionLayout.setVerticalGroup(
            lpnEnterDetentionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lpnEnterDetentionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDescriptor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lpnEnterDetentionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblAmount)
                    .addComponent(dcsOffenceDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lpnEnterDetentionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDate)
                    .addComponent(rdbMSP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbNK)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbPEO)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbMBD)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbMFD)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbAD)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lpnEnterDetentionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCampaignName1)
                    .addComponent(txfComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lpnEnterDetentionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCampaignName)
                    .addComponent(txfFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lpnEnterDetentionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstName)
                    .addComponent(txfSName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lpnEnterDetentionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLastName)
                    .addComponent(txfGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnInsert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        lpnEnterDetention.setLayer(txfGrade, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(txfSName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(lblAmount, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(lblFirstName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(lblLastName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(txfFName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(lblCampaignName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(lblDescriptor, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(lblDate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(rdbMSP, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(rdbNK, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(rdbPEO, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(rdbMBD, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(rdbMFD, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(rdbAD, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(btnClear, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(btnInsert, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(dcsOffenceDate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(lblCampaignName1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(txfComment, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnEnterDetention.setLayer(jSeparator1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lpnLearners.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        lblDescriptor1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblDescriptor1.setText("Learners:");

        tblSearchLearners.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tblSearchLearners.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Surname", "Grade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSearchLearners.setRowHeight(25);
        jScrollPane1.setViewportView(tblSearchLearners);
        if (tblSearchLearners.getColumnModel().getColumnCount() > 0) {
            tblSearchLearners.getColumnModel().getColumn(2).setPreferredWidth(5);
        }

        btnLearners1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnLearners1.setText("Manage Learners");
        btnLearners1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLearners1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout lpnLearnersLayout = new javax.swing.GroupLayout(lpnLearners);
        lpnLearners.setLayout(lpnLearnersLayout);
        lpnLearnersLayout.setHorizontalGroup(
            lpnLearnersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lpnLearnersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lpnLearnersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDescriptor1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                    .addComponent(btnLearners1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        lpnLearnersLayout.setVerticalGroup(
            lpnLearnersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lpnLearnersLayout.createSequentialGroup()
                .addComponent(lblDescriptor1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLearners1)
                .addContainerGap())
        );
        lpnLearners.setLayer(lblDescriptor1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnLearners.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnLearners.setLayer(btnLearners1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lpnDetentions.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        lblDescriptor2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblDescriptor2.setText("Detentions:");

        btnAttend.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnAttend.setText("Log Today's Attendances");
        btnAttend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAttendActionPerformed(evt);
            }
        });

        btnPrintPDF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnPrintPDF.setText("Print Break Detentions");
        btnPrintPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintPDFActionPerformed(evt);
            }
        });

        tblDetentions.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tblDetentions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Surname", "Grade", "Detentions Due"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetentions.setRowHeight(25);
        tblDonations.setViewportView(tblDetentions);

        btnFridays.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnFridays.setText("Print Friday Detentions");
        btnFridays.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFridaysActionPerformed(evt);
            }
        });

        btnFridayAttend.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnFridayAttend.setText("Log Friday's Attendances");
        btnFridayAttend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFridayAttendActionPerformed(evt);
            }
        });

        btnAttendDisc.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnAttendDisc.setText("Log Disciplinary Attendances");
        btnAttendDisc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAttendDiscActionPerformed(evt);
            }
        });

        btnPrintDiscipl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnPrintDiscipl.setText("Print Disciplinary Hearings");
        btnPrintDiscipl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintDisciplActionPerformed(evt);
            }
        });

        btnPrintPDF1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnPrintPDF1.setText("Send Emails");
        btnPrintPDF1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintPDF1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout lpnDetentionsLayout = new javax.swing.GroupLayout(lpnDetentions);
        lpnDetentions.setLayout(lpnDetentionsLayout);
        lpnDetentionsLayout.setHorizontalGroup(
            lpnDetentionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lpnDetentionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lpnDetentionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tblDonations, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDescriptor2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lpnDetentionsLayout.createSequentialGroup()
                        .addGroup(lpnDetentionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPrintPDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnFridays, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnPrintDiscipl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(lpnDetentionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAttendDisc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnFridayAttend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAttend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(btnPrintPDF1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        lpnDetentionsLayout.setVerticalGroup(
            lpnDetentionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lpnDetentionsLayout.createSequentialGroup()
                .addComponent(lblDescriptor2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tblDonations, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lpnDetentionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrintPDF)
                    .addComponent(btnAttend))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lpnDetentionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFridays)
                    .addComponent(btnFridayAttend))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lpnDetentionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrintDiscipl)
                    .addComponent(btnAttendDisc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPrintPDF1))
        );
        lpnDetentions.setLayer(lblDescriptor2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnDetentions.setLayer(btnAttend, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnDetentions.setLayer(btnPrintPDF, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnDetentions.setLayer(tblDonations, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnDetentions.setLayer(btnFridays, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnDetentions.setLayer(btnFridayAttend, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnDetentions.setLayer(btnAttendDisc, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnDetentions.setLayer(btnPrintDiscipl, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpnDetentions.setLayer(btnPrintPDF1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btnLearners.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnLearners.setText("Learners");
        btnLearners.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLearnersActionPerformed(evt);
            }
        });

        btnHome.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnHome.setText("Home");
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        btnDetentions.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnDetentions.setText("Detentions");
        btnDetentions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetentionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lpnLearners, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lpnEnterDetention, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lpnDetentions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLearners, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDetentions, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnHome, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLearners)
                        .addComponent(btnDetentions)
                        .addComponent(btnHome)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lpnLearners)
                    .addComponent(lpnEnterDetention)
                    .addComponent(lpnDetentions))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAttendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAttendActionPerformed
        dispose();
        AttendBreakGUI att = new AttendBreakGUI();
    }//GEN-LAST:event_btnAttendActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        if (allLearnersIV.size() == 1) {
            try {
                System.out.println("Inserting");

                if (!rdbOffence.isSelected(null)) {
                    if (dcsOffenceDate.getDate() != null) {
                        String offenceID = rdbOffence.getSelection().getActionCommand();
                        Date date = dcsOffenceDate.getDate();
                        String comment = txfComment.getText();
                        String fName = (String) allLearnersIV.get(0).get(0);
                        String sName = (String) allLearnersIV.get(0).get(1);
                        String grade = (String) allLearnersIV.get(0).get(2);

                        String queryLearner = "SELECT LearnerID\n"
                                + "FROM tblLearner\n"
                                + "WHERE Enrolled = TRUE AND FName LIKE '" + fName + "' And SName LIKE '" + sName + "' AND Grade = " + grade + "\n"
                                + "ORDER BY Grade DESC, SName DESC, FName DESC;";
                        ResultSet rs = DatabaseDriver.query(queryLearner);
                        if (rs.next()) {
                            int learnerID = Integer.parseInt(rs.getString("LearnerID"));
                            SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
                            String offenceDate = formatter.format(date);
                            String sqlStatement = "INSERT INTO tblDetention(LearnerID, OffenceID, OffenceDate, Comment, Attended)\n"
                                    + "VALUES(" + learnerID + ", " + offenceID + ", #" + offenceDate + "#, '" + comment + "', FALSE);";
                            boolean inserted = DatabaseDriver.insert(sqlStatement);
                            if (!inserted) {
                                JOptionPane.showMessageDialog(null, "The learner could not be added.\n", "Error", ERROR_MESSAGE);
                            } else {
                                System.out.println("assigned");
                                btnClearActionPerformed(evt);
                                txfFName.requestFocusInWindow();
                                populateLearnersTable("", "", "");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "No learners found.\n", "Error", ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Enter the date of the offence.\n", "Invalid Input Error", ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Select the offence type.", "Invalid Input Error", ERROR_MESSAGE);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Not all the fields are valid.\n" + ex, "Error", ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Only one learner at a time.\n", "Error", ERROR_MESSAGE);
        }

        addFridays();
        addDisciplinaries();
        populateBreakDetentionsTable();

        btnPrintPDF.setText("Print Break Detention Sheet (" + (detentionsIV.size()) + ")");
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txfFName.setText("");
        txfSName.setText("");
        txfGrade.setText("");
        populateLearnersTable("", "", "");
    }//GEN-LAST:event_btnClearActionPerformed

    private void txfFNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfFNameKeyTyped
        String fName = txfFName.getText();
        String sName = txfSName.getText();
        String grade = txfGrade.getText();
        char ch = evt.getKeyChar();
        if (Character.isLetter(ch)) {
            fName += ch;
        }
        populateLearnersTable(fName, sName, grade);
    }//GEN-LAST:event_txfFNameKeyTyped

    private void txfFNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfFNameKeyPressed

    }//GEN-LAST:event_txfFNameKeyPressed

    private void txfFNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfFNameActionPerformed
        btnInsert.doClick();
    }//GEN-LAST:event_txfFNameActionPerformed

    private void txfSNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfSNameKeyTyped
        String fName = txfFName.getText();
        String sName = txfSName.getText();
        String grade = txfGrade.getText();
        char ch = evt.getKeyChar();
        if (Character.isLetter(ch) || ch == ' ') {
            sName += ch;
        }
        populateLearnersTable(fName, sName, grade);
    }//GEN-LAST:event_txfSNameKeyTyped

    private void txfSNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfSNameActionPerformed
        btnInsert.doClick();
    }//GEN-LAST:event_txfSNameActionPerformed

    private void txfGradeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfGradeKeyTyped
        String fName = txfFName.getText();
        String sName = txfSName.getText();
        String grade = txfGrade.getText();
        char ch = evt.getKeyChar();
        if (Character.isDigit(ch)) {
            grade += ch;
        }
        populateLearnersTable(fName, sName, grade);
    }//GEN-LAST:event_txfGradeKeyTyped

    private void txfGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfGradeActionPerformed
        btnInsert.doClick();
    }//GEN-LAST:event_txfGradeActionPerformed

    private void btnPrintPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintPDFActionPerformed
        String formattedDate = "" + new SimpleDateFormat("yyyy-MM-dd HH.mm").format(new Date());
        String fileName = formattedDate + " Break Detentions";

        try {
            //print pdf
            Document doc = new Document();
            PdfWriter.getInstance(doc, new FileOutputStream(fileName + ".pdf"));
            doc.open();
            PdfPTable pdfTable = new PdfPTable(tblDetentions.getColumnCount());
            int[] relativeWidths = {150, 150, 100, 100};
            pdfTable.setWidths(relativeWidths);
            Font headerFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD, BaseColor.WHITE);

            Font titleFont = new Font(Font.FontFamily.HELVETICA, 22, Font.BOLD, BaseColor.BLACK);
            Paragraph p = new Paragraph(fileName, titleFont);
            p.setAlignment(1);
            doc.add(p);
            doc.add(new Paragraph(" "));

            //adding table headers
            for (int i = 0; i < tblDetentions.getColumnCount(); i++) {
                PdfPCell c1 = new PdfPCell(new Phrase(tblDetentions.getColumnName(i), headerFont));
                c1.setBackgroundColor(BaseColor.DARK_GRAY);
                c1.setHorizontalAlignment(Element.ALIGN_CENTER);
                pdfTable.addCell(c1);
            }
            //extracting data from the JTable and inserting it to PdfPTable
            for (int rows = 0; rows < tblDetentions.getRowCount(); rows++) {
                for (int cols = 0; cols < tblDetentions.getColumnCount(); cols++) {
                    pdfTable.addCell(tblDetentions.getModel().getValueAt(rows, cols).toString());
                }
            }

            doc.add(pdfTable);
            doc.close();
            System.out.println("Printing to PDF complete:" + fileName);
        } catch (DocumentException | FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Error printing PDF:\n" + ex, "PDF Error", ERROR_MESSAGE);
        }
        File pdfFile = new File(fileName + ".pdf");
        try {
            Desktop.getDesktop().open(pdfFile);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error opening PDF:\n" + ex, "PDF Error", ERROR_MESSAGE);
        }

//        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH.mm");
//        String formattedDate = sdf.format(new Date());
//        String fileName = "Detention Sheet " + formattedDate;
//        System.out.println(fileName);
//
//        Document document = new Document(PageSize.A4.rotate());
//        try {
//            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(fileName + ".pdf"));
//            document.open();
//            PdfContentByte cb = writer.getDirectContent();
//            cb.saveState();
//
//            int x = tblDetentions.getWidth(), y = tblDetentions.getHeight();
//            PdfTemplate pdfTemplate = cb.createTemplate(x, y);
//            Graphics2D g2 = pdfTemplate.createGraphics(x, y);
//            tblDetentions.print(g2);
//
//            cb.addTemplate(pdfTemplate, x, y);
//            g2.dispose();
//            cb.restoreState();
//        } catch (FileNotFoundException | DocumentException e) {
//            JOptionPane.showMessageDialog(null, e, "PDF Printing Error", ERROR_MESSAGE);
//        }
//        document.close();
    }//GEN-LAST:event_btnPrintPDFActionPerformed

    private void btnLearnersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLearnersActionPerformed
        dispose();
        LearnersTableGUI ctg = new LearnersTableGUI();
    }//GEN-LAST:event_btnLearnersActionPerformed

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        dispose();
        HomeGUI homeGUI = new HomeGUI();
    }//GEN-LAST:event_btnHomeActionPerformed

    private void btnDetentionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetentionsActionPerformed
        dispose();
        DetentionsTableGUI dtg = new DetentionsTableGUI();
    }//GEN-LAST:event_btnDetentionsActionPerformed

    private void btnFridaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFridaysActionPerformed
        String formattedDate = "" + new SimpleDateFormat("yyyy-MM-dd HH.mm").format(new Date());
        String fileName = formattedDate + " Friday Detentions";

        try {
            String sqlStatement = "SELECT tblLearner.FName, tblLearner.SName, tblLearner.Grade, COUNT(*) AS ['Number'] \n"
                    + "FROM tblDetention, tblLearner\n"
                    + "WHERE tblLearner.LearnerID = tblDetention.LearnerID \n"
                    + "AND (OffenceID = 7) \n"
                    + "AND Attended = FALSE \n"
                    + "AND Enrolled = TRUE \n"
                    + "GROUP BY tblLearner.LearnerID, tblLearner.FName, tblLearner.SName, tblLearner.Grade \n"
                    + "ORDER BY tblLearner.Grade, tblLearner.FName, tblLearner.SName;";
            ResultSet rs = DatabaseDriver.query(sqlStatement);
            ResultSetMetaData metaData = rs.getMetaData();
            int columnCount = metaData.getColumnCount();

            //print pdf
            Document doc = new Document();
            PdfWriter.getInstance(doc, new FileOutputStream(fileName + ".pdf"));
            doc.open();
            PdfPTable pdfTable = new PdfPTable(tblDetentions.getColumnCount());
            int[] relativeWidths = {100, 100, 100, 100};
            pdfTable.setWidths(relativeWidths);

            Font titleFont = new Font(Font.FontFamily.HELVETICA, 22, Font.BOLD, BaseColor.BLACK);
            Paragraph p = new Paragraph(fileName, titleFont);
            p.setAlignment(1);
            doc.add(p);
            doc.add(new Paragraph(" "));

            Font myFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD, BaseColor.WHITE);
            String[] header = {"Name", "Surname", "Grade", "Number"};
            for (String n : header) {
                PdfPCell h1 = new PdfPCell(new Phrase(n, myFont));
                h1.setBackgroundColor(BaseColor.DARK_GRAY);
                h1.setHorizontalAlignment(Element.ALIGN_CENTER);
                pdfTable.addCell(h1);
            }

            while (rs.next()) {
                for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                    PdfPCell c1 = new PdfPCell(new Phrase("" + rs.getObject(columnIndex)));
                    pdfTable.addCell(c1);
                }
            }

            doc.add(pdfTable);
            doc.close();
            System.out.println("Printing to PDF complete:" + fileName);
        } catch (DocumentException | FileNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error printing PDF:\n" + ex, "PDF Error", ERROR_MESSAGE);
        }
        File pdfFile = new File(fileName + ".pdf");
        try {
            Desktop.getDesktop().open(pdfFile);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error opening PDF:\n" + ex, "PDF Error", ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnFridaysActionPerformed

    private void btnFridayAttendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFridayAttendActionPerformed
        dispose();
        AttendFridaysGUI afg = new AttendFridaysGUI();
    }//GEN-LAST:event_btnFridayAttendActionPerformed

    private void btnAttendDiscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAttendDiscActionPerformed
        dispose();
        AttendHearingsGUI adg = new AttendHearingsGUI();
    }//GEN-LAST:event_btnAttendDiscActionPerformed

    private void btnPrintDisciplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintDisciplActionPerformed
        String formattedDate = "" + new SimpleDateFormat("yyyy-MM-dd HH.mm").format(new Date());
        String fileName = formattedDate + " Disciplinary Hearings";

        try {
            Document doc = new Document();
            PdfWriter.getInstance(doc, new FileOutputStream(fileName + ".pdf"));
            doc.open();

            Font titleFont = new Font(Font.FontFamily.HELVETICA, 22, Font.BOLD, BaseColor.BLACK);
            Paragraph p = new Paragraph(fileName, titleFont);
            p.setAlignment(1);
            doc.add(p);
            doc.add(new Paragraph(" "));

            PdfPTable pdfTable = new PdfPTable(tblDetentions.getColumnCount());
            int[] relativeWidths = {100, 100, 100, 100};
            pdfTable.setWidths(relativeWidths);

            Font myFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD, BaseColor.WHITE);
            String[] header = {"Name", "Surname", "Grade", "Number"};
            for (String n : header) {
                PdfPCell h1 = new PdfPCell(new Phrase(n, myFont));
                h1.setBackgroundColor(BaseColor.DARK_GRAY);
                h1.setHorizontalAlignment(Element.ALIGN_CENTER);
                pdfTable.addCell(h1);
            }

            String sqlStatement = "SELECT tblLearner.FName, tblLearner.SName, tblLearner.Grade, COUNT(*) AS Nr\n"
                    + "FROM tblDetention, tblLearner\n"
                    + "WHERE tblLearner.LearnerID = tblDetention.LearnerID AND OffenceID = 8 AND Attended = FALSE AND Enrolled = TRUE \n"
                    + "GROUP BY tblLearner.LearnerID, tblLearner.FName, tblLearner.SName, tblLearner.Grade\n"
                    + "ORDER BY tblLearner.Grade, tblLearner.FName, tblLearner.SName;";
            ResultSet rs = DatabaseDriver.query(sqlStatement);
            ResultSetMetaData metaData = rs.getMetaData();
            int columnCount = metaData.getColumnCount();

            while (rs.next()) {
                for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                    PdfPCell c1 = new PdfPCell(new Phrase(format(rs.getObject(columnIndex))));
                    pdfTable.addCell(c1);
                }
            }
            doc.add(pdfTable);
            doc.add(new Paragraph(" "));
            doc.add(new Paragraph(" "));

            int[] evWidths = {80, 80, 100, 100, 100, 100};
            String[] evHeader = {"Name", "Surname", "Date", "Offence", "Comment", "Attended"};
            PdfPTable evidence = new PdfPTable(evWidths.length);
            evidence.setWidths(evWidths);

            for (String n : evHeader) {
                PdfPCell h1 = new PdfPCell(new Phrase(n, myFont));
                h1.setBackgroundColor(BaseColor.DARK_GRAY);
                h1.setHorizontalAlignment(Element.ALIGN_CENTER);
                evidence.addCell(h1);
            }

            String sqlEvidence = "SELECT tblLearner.FName, tblLearner.SName, OffenceDate, tblOffence.Offence, Comment, DetentionDate\n"
                    + "FROM tblDetention, tblLearner, tblOffence \n"
                    + "WHERE tblLearner.LearnerID = tblDetention.LearnerID \n"
                    + "AND tblOffence.OffenceID = tblDetention.OffenceID \n"
                    + "AND tblDetention.LearnerID IN ( \n"
                    + "SELECT LearnerID FROM tblDetention \n"
                    + "WHERE OffenceID = 8 \n"
                    + "AND Attended = FALSE \n"
                    + "AND Enrolled = TRUE \n"
                    + "GROUP BY LearnerID) \n"
                    + "ORDER BY tblLearner.Grade, tblLearner.FName, tblLearner.SName, OffenceDate;";
            ResultSet rsEv = DatabaseDriver.query(sqlEvidence);
            ResultSetMetaData mDEv = rsEv.getMetaData();
            int columnCountEv = mDEv.getColumnCount();

            while (rsEv.next()) {
                for (int columnIndex = 1; columnIndex <= columnCountEv; columnIndex++) {
                    PdfPCell c1 = new PdfPCell(new Phrase(format(rsEv.getObject(columnIndex))));
                    evidence.addCell(c1);
                }
            }
            doc.add(evidence);

            doc.close();
            System.out.println("Printing to PDF complete:" + fileName);
        } catch (DocumentException | FileNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error printing PDF:\n" + ex, "PDF Error", ERROR_MESSAGE);
        }
        File pdfFile = new File(fileName + ".pdf");
        try {
            Desktop.getDesktop().open(pdfFile);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error opening PDF:\n" + ex, "PDF Error", ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnPrintDisciplActionPerformed

    private void txfCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfCommentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfCommentActionPerformed

    private void txfCommentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfCommentKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfCommentKeyPressed

    private void txfCommentKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfCommentKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txfCommentKeyTyped

    private void btnLearners1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLearners1ActionPerformed
        btnLearners.doClick();
    }//GEN-LAST:event_btnLearners1ActionPerformed

    private void btnPrintPDF1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintPDF1ActionPerformed
        dispose();
        /**
         * THE FOLLOWING CODE MAY BE UNCOMMENTED WHEN THE EMAILING ERROR HAS
         * BEEN RESOLVED TO PARSE THE SENDER'S LOGIN DETAILS TO THE OUTBOXGUI
         */
//        String email = JOptionPane.showInputDialog(null, "Enter your email:", "Preparing to send emails", PLAIN_MESSAGE);
//        if (!email.isEmpty()) {
//            String pass = JOptionPane.showInputDialog(null, "Enter your password:", "Preparing to send emails", PLAIN_MESSAGE);
//            if (!pass.isEmpty()) {
        OutboxGUI og = new OutboxGUI("SENDER'S EMAIL COMES HERE", "SENDER'S PASSWORD COMES HERE");
//            } else {
//                JOptionPane.showMessageDialog(null, "Password cannot be empty.", "Error", ERROR_MESSAGE);
//                new HomeGUI();
//            }
//        } else {
//            JOptionPane.showMessageDialog(null, "Email cannot be empty.", "Error", ERROR_MESSAGE);
//            new HomeGUI();
//        }
    }//GEN-LAST:event_btnPrintPDF1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAttend;
    private javax.swing.JButton btnAttendDisc;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDetentions;
    private javax.swing.JButton btnFridayAttend;
    private javax.swing.JButton btnFridays;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnLearners;
    private javax.swing.JButton btnLearners1;
    private javax.swing.JButton btnPrintDiscipl;
    private javax.swing.JButton btnPrintPDF;
    private javax.swing.JButton btnPrintPDF1;
    private com.toedter.calendar.JDateChooser dcsOffenceDate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAmount;
    private javax.swing.JLabel lblCampaignName;
    private javax.swing.JLabel lblCampaignName1;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDescriptor;
    private javax.swing.JLabel lblDescriptor1;
    private javax.swing.JLabel lblDescriptor2;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLayeredPane lpnDetentions;
    private javax.swing.JLayeredPane lpnEnterDetention;
    private javax.swing.JLayeredPane lpnLearners;
    private javax.swing.JRadioButton rdbAD;
    private javax.swing.JRadioButton rdbMBD;
    private javax.swing.JRadioButton rdbMFD;
    private javax.swing.JRadioButton rdbMSP;
    private javax.swing.JRadioButton rdbNK;
    private javax.swing.ButtonGroup rdbOffence;
    private javax.swing.JRadioButton rdbPEO;
    private javax.swing.JTable tblDetentions;
    private javax.swing.JScrollPane tblDonations;
    private javax.swing.JTable tblSearchLearners;
    private javax.swing.JTextField txfComment;
    private javax.swing.JTextField txfFName;
    private javax.swing.JTextField txfGrade;
    private javax.swing.JTextField txfSName;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            JOptionPane.showMessageDialog(null, "Look and feel error:\n" + ex, "LnF Error", ERROR_MESSAGE);
        }

        HomeGUI home = new HomeGUI();

    }

    private void populateLearnersTable(String fName, String sName, String grade) {
        try {
            allLearnersIV.clear();
            String sqlStatement = "SELECT FName, SName, Grade\n"
                    + "FROM tblLearner\n"
                    + "WHERE Enrolled = TRUE \n"
                    + "AND FName LIKE '" + fName + "*' \n"
                    + "AND SName LIKE '" + sName + "*' \n"
                    + "AND Grade LIKE '" + grade + "*' \n"
                    + "AND Enrolled = TRUE \n"
                    + "ORDER BY Grade DESC , SName DESC , FName DESC;";
            ResultSet rs = DatabaseDriver.query(sqlStatement);
            ResultSetMetaData metaData = rs.getMetaData();
            int columnCount = metaData.getColumnCount();

            while (rs.next()) {
                Vector<Object> vector = new Vector<>();
                for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                    vector.add("" + rs.getObject(columnIndex));
                }
                allLearnersIV.add(vector);
            }

            DefaultTableModel dtm = (DefaultTableModel) tblSearchLearners.getModel();
            dtm.setRowCount(0);
            Iterator<Vector<Object>> iterator = allLearnersIV.iterator();
            while (iterator.hasNext()) {
                Vector<Object> currentRecord = (Vector<Object>) iterator.next();
                dtm.insertRow(0, currentRecord);

            }
            if (dtm.getRowCount() == 1 && !rdbOffence.isSelected(null) && dcsOffenceDate.getDate() != null && !txfComment.getText().isEmpty()) {
                btnInsert.setEnabled(true);
                btnInsert.setBackground(Color.green);
            } else {
                btnInsert.setEnabled(false);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Not all the fields are valid.\n" + ex, "Error", ERROR_MESSAGE);
        }

    }

    private void populateBreakDetentionsTable() {
        try {
            String sqlStatement = "SELECT tblLearner.FName, tblLearner.SName, tblLearner.Grade, COUNT(*) AS ['Number']\n"
                    + "FROM tblDetention, tblLearner\n"
                    + "WHERE tblLearner.LearnerID = tblDetention.LearnerID \n"
                    + "AND Attended = FALSE \n"
                    + "AND OffenceID < 7 \n"
                    + "AND Enrolled = TRUE \n"
                    + "GROUP BY tblLearner.LearnerID, tblLearner.FName, tblLearner.SName, tblLearner.Grade \n"
                    + "ORDER BY tblLearner.Grade DESC, tblLearner.FName DESC, tblLearner.SName DESC;";
            ResultSet rs = DatabaseDriver.query(sqlStatement);
            ResultSetMetaData metaData = rs.getMetaData();
            int columnCount = metaData.getColumnCount();

            detentionsIV.clear();
            while (rs.next()) {
                Vector<Object> vector = new Vector<>();
                for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                    vector.add("" + rs.getObject(columnIndex));
                }
                detentionsIV.add(vector);
            }

            DefaultTableModel dtm = (DefaultTableModel) tblDetentions.getModel();
            dtm.setRowCount(0);
            Iterator<Vector<Object>> iterator = detentionsIV.iterator();
            while (iterator.hasNext()) {
                Vector<Object> currentRecord = (Vector<Object>) iterator.next();
                dtm.insertRow(0, currentRecord);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "SQL Exception\n" + ex, "Invalid Input Error", ERROR_MESSAGE);
        }
    }

    public void addFridays() {
        try {
            String sqlFridays = "INSERT INTO tblDetention ( LearnerID, OffenceID, OffenceDate, FridayDetention )\n"
                    + "SELECT LearnerID, 7, NOW(), TRUE\n"
                    + "FROM tblDetention\n"
                    + "GROUP BY LearnerID\n"
                    + "HAVING COUNT(*) IN (5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70);";
            boolean insertF = DatabaseDriver.insert(sqlFridays);
            System.out.println("Fridays inserted :" + insertF);

            String sql = "SELECT COUNT(*)\n"
                    + "FROM tblDetention, tblLearner\n"
                    + "WHERE OffenceID = 7 \n"
                    + "AND tblLearner.LearnerID = tblDetention.LearnerID\n"
                    + "AND Enrolled = TRUE \n"
                    + "AND Attended = FALSE;";
            ResultSet rs = DatabaseDriver.query(sql);
            rs.next();
            String nrOfFridays = "" + rs.getObject(1);
            btnFridays.setText("Print Friday Detentions (" + nrOfFridays + ")");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error Adding Friday Detentions SQL:\n" + ex, "Error", ERROR_MESSAGE);
        }
    }

    public void addDisciplinaries() {
        try {
            String sqlDiscip = "INSERT INTO tblDetention ( LearnerID, OffenceID, OffenceDate, FridayDetention )\n"
                    + "SELECT LearnerID, 8, NOW(), FALSE\n"
                    + "FROM tblDetention\n"
                    + "GROUP BY LearnerID\n"
                    + "HAVING COUNT(*) IN (12, 24, 36, 48, 60, 72, 84);";
            boolean insertS = DatabaseDriver.insert(sqlDiscip);
            System.out.println("Discpl inserted :" + insertS);

            String sql = "SELECT COUNT(*)\n"
                    + "FROM tblDetention, tblLearner\n"
                    + "WHERE OffenceID = 8 \n"
                    + "AND tblLearner.LearnerID = tblDetention.LearnerID\n"
                    + "AND Enrolled = TRUE \n"
                    + "AND Attended = FALSE;";
            ResultSet rs = DatabaseDriver.query(sql);
            rs.next();
            String nrOfDiscipls = "" + rs.getObject(1);
            btnPrintDiscipl.setText("Print Disciplinary Hearings (" + nrOfDiscipls + ")");

//        try {
//            String sqlGetDisc = "SELECT tblSearchLearners.FName, tblSearchLearners.SName, tblSearchLearners.Grade, COUNT(*) AS [Nr]\n"
//                    + "FROM tblDetention, tblSearchLearners\n"
//                    + "WHERE tblSearchLearners.LearnerID = tblDetention.LearnerID AND OffenceID = 9 AND Attended = FALSE\n"
//                    + "GROUP BY tblSearchLearners.LearnerID, tblSearchLearners.FName, tblSearchLearners.SName, tblSearchLearners.Grade\n"
//                    + "ORDER BY tblSearchLearners.FName, tblSearchLearners.SName, tblSearchLearners.Grade;";
//            ResultSet rs = DatabaseDriver.query(sqlGetDisc);
//            while (rs.next()) {
//                JOptionPane.showMessageDialog(null, "Print a disciplinary hearin for: \n" + rs.getObject(1) + " " + rs.getObject(2) + " in Grade " + rs.getObject(3));
//            }
//        } catch (SQLException ex) {
//            Logger.getLogger(HomeGUI.class.getName()).log(Level.SEVERE, null, ex);
//        }
        } catch (SQLException ex) {
            Logger.getLogger(HomeGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String format(Object obj) {
        String result;
        if (obj == null) {
            return "";
        } else if ((obj.getClass() + "").equalsIgnoreCase("class java.sql.Timestamp")) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            result = sdf.format(obj);
        } else {
            result = obj.toString();
        }
        return result;
    }

}
